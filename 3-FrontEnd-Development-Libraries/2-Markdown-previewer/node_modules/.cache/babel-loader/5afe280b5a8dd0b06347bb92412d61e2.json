{"ast":null,"code":"var _jsxFileName = \"/Users/sarlot/Desktop/Programming/freecodecamp/3-FrontEnd-Development-Libraries/2-Markdown-previewer/my-app/src/App.js\";\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport React from \"react\";\n/*\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst projectName = \"markdown-previewer\";\nconst placeholder = `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | -------------\nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want!\n1. And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n`;\n/*\n//Line breaks with return button\nmarked.setOptions({\n  breaks: true\n});\n\n//Inserts target=\"_blank\" into href tags (It is required for codepen links)\nconst renderer = new marked.Renderer;\nrenderer.link = function(href, text) {\n  return `<a target=\"_blank\" href=\"${href}\">${text}` + '</a>';\n};\n*/\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      markdown: placeholder //  editorMaximized: false,\n      //   previewMaximized: false\n\n    }; //End of super(props)\n\n    this.handleChange = this.handleChange.bind(this); //  this.handleEditorMaximized() = this.handleEditorMaximized.bind(this);\n    //  this.handlePreviewMaximized() = this.handlePreviewMaximized.bind(this);\n  } //End of constructor(props)\n\n\n  handleChange(e) {\n    this.setState({\n      markdown: e.target.value\n    });\n  }\n  /*\n  handleEditorMaximized() {\n  this.setState({\n    editorMaximized: !this.state.editorMaximized\n  });\n  }\n  handlePreviewMaximized() {\n  this.setState({\n    previewMaximized: !this.state.previewMaximized\n  });\n  }\n  */\n\n\n  render() {\n    //  const classes = this.state.editorMaximized ? []\n    return (\n      /*#__PURE__*/\n      // /*\n      _jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-center\",\n          children: \"Convert your Markdown\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-5\",\n            children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n              id: \"editor\",\n              value: this.state.markdown,\n              onChange: this.handleChange,\n              className: \"form-control\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-8 preview rounded\",\n            id: \"preview\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 7\n      }, this)\n    ); //End of return\n  } //End of render\n\n\n} //End of class App\n//ReactDOM.render(<App />, document.getElementById('app'));\n\n\nexport default App;","map":{"version":3,"sources":["/Users/sarlot/Desktop/Programming/freecodecamp/3-FrontEnd-Development-Libraries/2-Markdown-previewer/my-app/src/App.js"],"names":["React","projectName","placeholder","App","Component","constructor","props","state","markdown","handleChange","bind","e","setState","target","value","render"],"mappings":";;AACA,OAAO,WAAP;AACA,OAAOA,KAAP,MAAkB,OAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMC,WAAW,GAAG,oBAApB;AACA,MAAMC,WAAW,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA3CA;AA8CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,GAAN,SAAkBH,KAAK,CAACI,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAEN,WADC,CAEb;AACD;;AAHc,KAAb,CAFiB,CAMd;;AAEH,SAAKO,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB,CARiB,CASnB;AACA;AACC,GAZ+B,CAY9B;;;AAEFD,EAAAA,YAAY,CAACE,CAAD,EACb;AACE,SAAKC,QAAL,CAAc;AACZJ,MAAAA,QAAQ,EAAEG,CAAC,CAACE,MAAF,CAASC;AADP,KAAd;AAGD;AACE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEEC,EAAAA,MAAM,GAAE;AACR;AACE;AAAA;AACC;AACC;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,gCACE;AAAI,UAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAK,UAAA,SAAS,EAAC,KAAf;AAAA,iCACE;AAAK,YAAA,SAAS,EAAC,OAAf;AAAA,mCACE;AAAU,cAAA,EAAE,EAAC,QAAb;AAAsB,cAAA,KAAK,EAAE,KAAKR,KAAL,CAAWC,QAAxC;AAAkD,cAAA,QAAQ,EAAE,KAAKC,YAAjE;AAA+E,cAAA,SAAS,EAAC;AAAzF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAFF,eAQE;AAAK,UAAA,SAAS,EAAC,KAAf;AAAA,iCACE;AAAK,YAAA,SAAS,EAAC,uBAAf;AAAuC,YAAA,EAAE,EAAC;AAA1C;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBARF;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF,MAFM,CAoBH;AACJ,GAtD+B,CAsD9B;;;AAtD8B,C,CAuDhC;AACF;;;AAEA,eAAeN,GAAf","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport React from \"react\"\n\n/*\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n*/\n\nconst projectName = \"markdown-previewer\"\nconst placeholder = `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | -------------\nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want!\n1. And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n`;\n\n\n/*\n//Line breaks with return button\nmarked.setOptions({\n  breaks: true\n});\n\n//Inserts target=\"_blank\" into href tags (It is required for codepen links)\nconst renderer = new marked.Renderer;\nrenderer.link = function(href, text) {\n  return `<a target=\"_blank\" href=\"${href}\">${text}` + '</a>';\n};\n*/\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      markdown: placeholder\n    //  editorMaximized: false,\n   //   previewMaximized: false\n    }; //End of super(props)\n    \n    this.handleChange = this.handleChange.bind(this);\n  //  this.handleEditorMaximized() = this.handleEditorMaximized.bind(this);\n  //  this.handlePreviewMaximized() = this.handlePreviewMaximized.bind(this);\n  } //End of constructor(props)\n  \n  handleChange(e)\n {\n   this.setState({\n     markdown: e.target.value\n   });\n }\n    /*\n  handleEditorMaximized() {\n    this.setState({\n      editorMaximized: !this.state.editorMaximized\n    });\n  }\n\n  handlePreviewMaximized() {\n    this.setState({\n      previewMaximized: !this.state.previewMaximized\n    });\n  }\n*/\n  render(){\n  //  const classes = this.state.editorMaximized ? []\n    return(\n     // /*\n      <div className=\"container\">\n        <h1 className=\"text-center\">Convert your Markdown</h1>\n        <div className=\"row\">\n          <div className=\"col-5\">\n            <textarea id=\"editor\" value={this.state.markdown} onChange={this.handleChange} className=\"form-control\"> \n            </textarea>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-8 preview rounded\" id=\"preview\"\n            \n            >       \n          </div>\n        </div>\n      </div>\n\n    ); //End of return\n  } //End of render\n} //End of class App\n//ReactDOM.render(<App />, document.getElementById('app'));\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}