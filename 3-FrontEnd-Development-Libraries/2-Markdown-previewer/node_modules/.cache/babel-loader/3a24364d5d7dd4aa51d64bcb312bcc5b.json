{"ast":null,"code":"var _jsxFileName = \"/Users/sarlot/Desktop/Programming/freecodecamp/3-FrontEnd-Development-Libraries/2-Markdown-previewer/my-app/src/App.js\";\nimport logo from \"./logo.svg\";\nimport './App.css';\n/*\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n*/\n\n/*\nconst projectName = \"markdown-previewer\"\nconst placeholder = `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | -------------\nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want!\n1. And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n`;\n\n//Line breaks with return button\nmarked.setOptions({\n  breaks: true\n});\n\n//Inserts target=\"_blank\" into href tags (It is required for codepen links)\nconst renderer = new marked.Renderer;\nrenderer.link = function(href, text) {\n  return `<a target=\"_blank\" href=\"${href}\">${text}` + '</a>';\n};\n\nfunction App() {\n  //constructor(props) {\n    //super(props);\n    this.state = {\n      markdown: placeholder\n    //  editorMaximized: false,\n   //   previewMaximized: false\n    }; //End of super(props)\n    \n    this.handleChange = this.handleChange.bind(this);\n  //  this.handleEditorMaximized() = this.handleEditorMaximized.bind(this);\n  //  this.handlePreviewMaximized() = this.handlePreviewMaximized.bind(this);\n  } //End of constructor(props)\n  \n  handleChange(e)\n {\n   this.setState({\n     markdown: e.target.value\n   });\n }\n    /*\n  handleEditorMaximized() {\n    this.setState({\n      editorMaximized: !this.state.editorMaximized\n    });\n  }\n\n  handlePreviewMaximized() {\n    this.setState({\n      previewMaximized: !this.state.previewMaximized\n    });\n  }\n*/\n\n/*\n  render(){\n  //  const classes = this.state.editorMaximized ? []\n    return(\n     // /*\n      <div className=\"container\">\n        <h1 className=\"text-center\">Convert your Markdown</h1>\n        <div className=\"row\">\n          <div className=\"col-5\">\n            <textarea id=\"editor\" value={this.state.markdown} onChange={this.handleChange} className=\"form-control\"> \n            </textarea>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-8 preview rounded\" id=\"preview\"\n            dangerouslySetInnerHTML={{\n        __html: marked(this.state.markdown)\n      }}\n            >       \n          </div>\n        </div>\n      </div>\n\n    ); //End of return\n  } //End of render\n} //End of class App\n\n//\n\nexport default App;\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 149,\n  columnNumber: 17\n}, this), document.getElementById('app'));","map":{"version":3,"sources":["/Users/sarlot/Desktop/Programming/freecodecamp/3-FrontEnd-Development-Libraries/2-Markdown-previewer/my-app/src/App.js"],"names":["ReactDOM","render","document","getElementById"],"mappings":";;AACA,OAAO,WAAP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAA,QAAQ,CAACC,MAAT,eAAgB,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,QAAhB,EAAyBC,QAAQ,CAACC,cAAT,CAAwB,KAAxB,CAAzB","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\n/*\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n*/\n\n/*\nconst projectName = \"markdown-previewer\"\nconst placeholder = `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | -------------\nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want!\n1. And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n`;\n\n//Line breaks with return button\nmarked.setOptions({\n  breaks: true\n});\n\n//Inserts target=\"_blank\" into href tags (It is required for codepen links)\nconst renderer = new marked.Renderer;\nrenderer.link = function(href, text) {\n  return `<a target=\"_blank\" href=\"${href}\">${text}` + '</a>';\n};\n\nfunction App() {\n  //constructor(props) {\n    //super(props);\n    this.state = {\n      markdown: placeholder\n    //  editorMaximized: false,\n   //   previewMaximized: false\n    }; //End of super(props)\n    \n    this.handleChange = this.handleChange.bind(this);\n  //  this.handleEditorMaximized() = this.handleEditorMaximized.bind(this);\n  //  this.handlePreviewMaximized() = this.handlePreviewMaximized.bind(this);\n  } //End of constructor(props)\n  \n  handleChange(e)\n {\n   this.setState({\n     markdown: e.target.value\n   });\n }\n    /*\n  handleEditorMaximized() {\n    this.setState({\n      editorMaximized: !this.state.editorMaximized\n    });\n  }\n\n  handlePreviewMaximized() {\n    this.setState({\n      previewMaximized: !this.state.previewMaximized\n    });\n  }\n*/\n/*\n  render(){\n  //  const classes = this.state.editorMaximized ? []\n    return(\n     // /*\n      <div className=\"container\">\n        <h1 className=\"text-center\">Convert your Markdown</h1>\n        <div className=\"row\">\n          <div className=\"col-5\">\n            <textarea id=\"editor\" value={this.state.markdown} onChange={this.handleChange} className=\"form-control\"> \n            </textarea>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-8 preview rounded\" id=\"preview\"\n            dangerouslySetInnerHTML={{\n        __html: marked(this.state.markdown)\n      }}\n            >       \n          </div>\n        </div>\n      </div>\n\n    ); //End of return\n  } //End of render\n} //End of class App\n\n//\n\nexport default App;\n*/\n\nReactDOM.render(<App />, document.getElementById('app'));"]},"metadata":{},"sourceType":"module"}